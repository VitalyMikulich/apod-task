{"version":3,"sources":["components/ApodFrame/ApodFrame.js","components/APODContainer/APODContainer.js","components/APOD/Apod.js","components/FramesContainer/FramesContainer.js","components/Gallery/Gallery.js","App.js","serviceWorker.js","index.js"],"names":["ApodFrame","props","url","className","undefined","includes","title","width","height","src","frameBorder","allow","allowFullScreen","alt","getAPOD","date","a","fetch","responce","json","data","APODContainer","apodData","useState","setUrl","useEffect","Apod","todaysDate","sessionStorage","getItem","setDate","name","type","min","max","onChange","event","clear","setItem","target","value","FramesContainer","urls","length","map","item","index","key","to","onClick","document","querySelector","classList","add","transformToCorrect","number","getDaysInMonth","year","month","moment","daysInMonth","getAPODSForMonth","day","push","set","Gallery","Date","getFullYear","getMonth","setMonth","setYear","setUrls","addEventListener","htmlFor","id","remove","loadFrames","App","today","getDate","getTodaysDate","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e2fa4bcb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ApodFrame = (props) => {\r\n  \r\n  if(props.url === null) {\r\n    return (\r\n      <p className=\"loading\">Loading...</p>\r\n  )}\r\n\r\n  if(props.url === undefined) {\r\n    return (\r\n      <p className=\"noInfo\">No information was found for this day. Please pick another day.</p>\r\n  )}\r\n\r\n  if (props.url.includes('youtube')) {\r\n    return (\r\n      <iframe\r\n        title=\"APOD-youtube\"\r\n        width=\"960\"\r\n        height=\"540\"\r\n        src={props.url}\r\n        frameBorder=\"0\"\r\n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n        allowFullScreen />\r\n  )}\r\n\r\n  return (\r\n    <img src={props.url} alt=\"apod\" />\r\n  )\r\n}\r\n\r\nexport default ApodFrame;","import React, { useState, useEffect} from 'react';\r\nimport ApodFrame from '../ApodFrame/ApodFrame';\r\nimport './APODContainer.css';\r\n\r\nasync function getAPOD (date) {\r\n  const responce = await fetch(`https://api.nasa.gov/planetary/apod?api_key=S8M7EpoDYpWZueVQT8qGvGgZaalgUOr9O2UpZIwC&date=${date}`);\r\n  const data = await responce.json();\r\n  return await data;\r\n}\r\n\r\nconst APODContainer = (props) => {\r\n  let apodData = null;\r\n  const [url, setUrl] = useState(null);\r\n  useEffect(() => {\r\n    (async function(){\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      apodData = await getAPOD(props.date);\r\n      setUrl(apodData.url);\r\n  })()\r\n  })\r\n  \r\n  return (\r\n    <div className=\"APODContiner\">\r\n      <div className=\"date\">{props.date}</div>\r\n      <div className=\"photo-container\">\r\n        <div className=\"APOD-title\"></div>\r\n        <ApodFrame url={url} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default APODContainer;","import React, { useState } from 'react';\r\nimport './Apod.css';\r\nimport APODContainer from '../APODContainer/APODContainer';\r\n\r\nconst setItem = (todaysDate, date) => {\r\n  sessionStorage.clear();\r\n  if (date !== todaysDate) sessionStorage.setItem('date', date);\r\n}\r\n\r\nconst Apod = (props) => {\r\n  const todaysDate = props.todaysDate;\r\n  const [date, setDate] = useState(sessionStorage.getItem('date') !== null ? sessionStorage.getItem('date') : todaysDate);\r\n  return (\r\n      <main>\r\n        <input className=\"date-picker\"\r\n               name=\"date-picker\"\r\n               type=\"date\"\r\n               min=\"1995-06-16\"\r\n               max={todaysDate}\r\n               onChange={(event) => {\r\n                 setItem(todaysDate, event.target.value)\r\n                 setDate(event.target.value)}} />\r\n        <APODContainer date={date} />\r\n      </main>\r\n  );\r\n}\r\n\r\nexport default Apod;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst FramesContainer = (props) => {\r\n  if (props.urls === false) return null;\r\n\r\n  if (props.urls.length === 0) return (\r\n    <p className=\"loading\">Loading...</p>\r\n  )\r\n  return props.urls.map((item, index) => {\r\n    if(item.url.includes('youtube')) {\r\n      return (\r\n      <Link key={`frame${index}`} to='/apod' className=\"frame\" onClick={() => {\r\n        sessionStorage.setItem('date', item.date);\r\n        document.querySelector('#gallery-date').classList.add('display-none');\r\n      }}>\r\n        <iframe\r\n          title=\"APOD-youtube\"\r\n          width=\"533\"\r\n          height=\"300\"\r\n          src={item.url}\r\n          frameBorder=\"0\"\r\n          allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n          allowFullScreen />\r\n      </Link>\r\n    )} else return (\r\n      <Link key={`frame${index}`} to='/apod' className=\"frame\" onClick={() => {\r\n        sessionStorage.setItem('date', item.date);\r\n        document.querySelector('#gallery-date').classList.add('display-none');\r\n      }}>\r\n        <img \r\n          src={item.url}\r\n          alt=\"apod\" />\r\n      </Link>\r\n    )\r\n  });\r\n}\r\n\r\nexport default FramesContainer","import React, { useState, useEffect} from 'react';\r\nimport FramesContainer from '../FramesContainer/FramesContainer';\r\nimport * as moment from 'moment/moment'\r\nimport './Gallery.css';\r\n\r\nconst transformToCorrect = (number) => {\r\n  if (number < 10) number = '0' + number;\r\n  return number;\r\n}\r\n\r\nconst getDaysInMonth = (year, month) => {\r\n  return moment(`${year}-${month}`, 'YYYY-MM').daysInMonth()\r\n}\r\n\r\nasync function getAPODSForMonth (year, month) {\r\n  const urls = [];\r\n  for (let day = 1; day <= getDaysInMonth(year, month); day++) {\r\n    const responce = await fetch(`https://api.nasa.gov/planetary/apod?api_key=S8M7EpoDYpWZueVQT8qGvGgZaalgUOr9O2UpZIwC&date=${year}-${month}-${transformToCorrect(day)}`);\r\n    const data = await responce.json();\r\n    if (data.url !== undefined && !urls.includes(data.url)) urls.push({url: data.url, date: `${year}-${month}-${day}`});\r\n  }\r\n  return urls;\r\n}\r\n\r\n\r\nasync function loadFrames(set, year, month) {\r\n  set(await getAPODSForMonth(year, month));\r\n}\r\n\r\nconst Gallery = (props) => {\r\n  const todaysDate = sessionStorage.getItem('galleryDate') !== null ? sessionStorage.getItem('galleryDate') : props.todaysDate;\r\n  const max = {year: new Date(props.todaysDate).getFullYear(), month: transformToCorrect(new Date(props.todaysDate).getMonth() + 1)};\r\n  const [month, setMonth] = useState(transformToCorrect(new Date(todaysDate).getMonth() + 1));\r\n  const [year, setYear] = useState(new Date(todaysDate).getFullYear());\r\n  const [urls, setUrls] = useState(false);\r\n  useEffect(() => {\r\n    document.querySelector('#apodLink').addEventListener('click', () => {\r\n      document.querySelector('#gallery-date').classList.add('display-none');\r\n    })\r\n  })\r\n  return (\r\n    <div className=\"gallery-container\">\r\n      <div>\r\n        <label htmlFor=\"month-picker\">Please pick month</label>\r\n        <input type=\"month\"\r\n               className=\"month-picker\" \r\n               name=\"month-picker\"\r\n               id=\"month-picker\"\r\n               min=\"1995-06\"\r\n               max={`${max.year}-${max.month}`}\r\n               onChange={(event) => {\r\n                  setMonth(transformToCorrect(new Date(event.target.value).getMonth() + 1));\r\n                  setYear(new Date(event.target.value).getFullYear());\r\n                  setUrls([]);\r\n                  document.querySelector('#gallery-date').classList.remove('display-none');\r\n                  loadFrames(setUrls, new Date(event.target.value).getFullYear(), transformToCorrect(new Date(event.target.value).getMonth() + 1));\r\n                  sessionStorage.setItem('galleryDate', event.target.value);\r\n               }}/>\r\n      </div>\r\n      <div className=\"display-none\" id=\"gallery-date\">{year}-{month}</div>\r\n      <div className=\"gallery\">\r\n          <FramesContainer urls={urls} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Gallery;","import React, { useEffect } from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport './App.css';\nimport Apod from './components/APOD/Apod';\nimport Gallery from './components/Gallery/Gallery';\n\nconst getTodaysDate = () => {\n  let today = new Date();\n  const day = today.getDate();\n  let month = today.getMonth() + 1;\n  if (month < 10) month = '0' + month;\n  const year = today.getFullYear();\n  return `${year}-${month}-${day}`;\n}\n\nconst App = () => {\n  const todaysDate = getTodaysDate();\n  useEffect(() => {\n    document.querySelector('#galleryLink').addEventListener('click', () => {\n      sessionStorage.clear();\n    })\n  })\n  return (\n    <div className=\"App\">\n      <header>Astronomy Picture of the Day</header>\n      <nav>\n        <Link to='/apod' id=\"apodLink\">Show Picture of the Day</Link>\n        <Link to='/gallery' id=\"galleryLink\">Full gallery</Link>\n      </nav>\n      <Switch>\n        <Route \n          path='/apod' \n          component={() => <Apod todaysDate={todaysDate}/>} \n        />\n        <Route \n          path='/gallery' \n          component={() => <Gallery todaysDate={todaysDate}/>} \n        />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}